Alpha_Vision - графический движок
Движок можно импортировать следующим образом: import Alpha_Vision

Alpha_Vision имеет следующие классы и методы:

Matrix: Класс, при инициализации принимающий список списков вещественных чисел и создающий матрицу

Vector: Класс, при инициализации принимающий список списков вещественных чисел и создающий вектор

Point: Класс, при инициализации принимающий список списков вещественных чисел и создающий точку в пространстве

VectorSpace: Класс, при инициализации принимающий список векторов и векторное пространство

BilinearForm: Метод, принимающий матрицу и два вектора, и возвращающий билинейную форму матрицы


Matrix - класс, позволяющий создавать матрицы размерности n*m.
При инициализации вводится список списков вещественных чисел. Пример: a = Matrix([[1.5, 2.0, 3.25], [4.6, 9.8, 6.4], [2.767, 10.4, 85.4]])
Класс можно импортировать из Alpha_Vision следующим образом: import Alpha_Vision.Matrix as Matrix
Имеет следующие параметры:
floatlist - список списков вещественных чисел
m - количество строк в матрице
n - количество столбцов в матрице

Класс Matrix имеет следующие методы:

Стандартное сложение, вычитание, умножение и деление матриц
Стандартное умножение и деление матрицы на число
determinant: Возвращает определитель заданной матрицы
inverse: Возвращает матрицу, обратную заданной
transpose: Возвращает матрицу, транспонированную по отношению к заданной
identity: Принимает размерность n и возвращает n-мерную единичную матрицу
gram: Принимает список векторов и возвращает матрицу Грэма
rotator: Принимает значение угла в виде вещественного числа, индексы и размерность. Возвращает n-мерную матрицу поворота.


Vector - класс, наследуемый от класса Matrix. Позволяет создавать n-мерные вектора.
Пример: a = Vector([[1.5], [4.6], [2.767])
Класс можно импортировать из Alpha_Vision следующим образом: import Alpha_Vision.Vector as Vector
Имеет следующие параметры:
floatlist - список списков вещественных чисел
m - количество строк в векторе
n - количество столбцов в векторе. Всегда равно единице.

Vector имеет следующие методы:

scalmul: Принимает второй вектор и возвращает скалярное произведение векторов
Векторное произведение двух векторов. Обозначается при помощи оператора "**"
length: Возвращает длину заданного вектора
Ортонормированное скалярное произведение двух векторов. Обозначается при помощи оператора "%"


Point - класс, наследуемый от класса Vector. Позволяет создавать n-мерные точки.
Пример: a = Point([[1.5], [4.6], [2.767])
Класс можно импортировать из Alpha_Vision следующим образом: import Alpha_Vision.Point as Point
Имеет те же параметры, что и Vector

Point имеет следующие методы:
Сложение точки и вектора. В результате получается точка
Вычитание вектора из точки. В результате получается точка


VectorSpace - класс, позволяющий создавать векторные пространства
Пример: a = VectorSpace([v1, v2, v3]), где v1, v2, v3 - Vector
Класс можно импортировать из Alpha_Vision следующим образом: import Alpha_Vision.VectorSpace as VectorSpace
Имеет следующие параметры:
veclist - список векторов, из которых состоит векторное пространство. Все вектора должны иметь одинаковую размерность

VectorSpace имеет следующие методы:

scalmul: Принимает два базисных вектора и возвращает скалярное произведение по базису
vecfrom: Принимает точку и возвращает векторную форму пространства